/*
  ____  _     _____         _             _       
 | __ )| |   | ____|  _ __ | |_   _  __ _(_)_ __  
 |  _ \| |   |  _|   | '_ \| | | | |/ _` | | '_ \ 
 | |_) | |___| |___  | |_) | | |_| | (_| | | | | |
 |____/|_____|_____| | .__/|_|\__,_|\__, |_|_| |_|
                     |_|            |___/         
# A Template for Ble_pluginPlugin, a Source Plugin
# Generated by the command: plugin -t source -d ble_plugin BLE_plugin
# Hostname: Fram-IV.local
# Current working directory: /Users/p4010/Develop/MADS_plugins
# Creation date: 2024-08-05T14:03:32.554+0200
# NOTICE: MADS Version 1.0.2
*/
// Mandatory included headers
#include <nlohmann/json.hpp>
#include <pugg/Kernel.h>
#include <source.hpp>
// other includes as needed here
#include <csignal>
#include <simpleble/SimpleBLE.h>
#include <thread>
#include <vector>

// Define the name of the plugin
#ifndef PLUGIN_NAME
#define PLUGIN_NAME "ble_plugin"
#endif

// Load the namespaces
using namespace std;
using json = nlohmann::json;
using namespace SimpleBLE;

typedef union {
  char b[4];
  uint32_t v;
} ba_t;

// Plugin class. This shall be the only part that needs to be modified,
// implementing the actual functionality
class Ble_pluginPlugin : public Source<json> {

public:
  // Typically, no need to change this
  string kind() override { return PLUGIN_NAME; }

  ~Ble_pluginPlugin() {
    _peripheral.disconnect();
  }


  return_type get_output(json &out,
                         std::vector<unsigned char> *blob = nullptr) override {
    out.clear();

    ba_t value;
    string key;
    for (auto &uuid : _uuids) {
      strncpy(value.b, _peripheral.read(uuid.first, uuid.second).c_str(), 4);
      key = uuid.second.substr(0, uuid.second.find("-"));
      key.erase(0, key.find_first_not_of('0'));
      out[key] = value.v;
    }
    if (!_agent_id.empty())
      out["agent_id"] = _agent_id;
    return return_type::success;
  }

  void set_params(void const *params) override {
    Source::set_params(params);
    _params["silent"] = false;
    _params["list_peripherals"] = false;
    _params["characteristics"] = json::array();
    _params.merge_patch(*(json *)params);

    vector<Adapter> adapters = Adapter::get_adapters();
    bool found = false;
    _adapter = adapters[0];

    _adapter.set_callback_on_scan_start([&]() {
      if (!_params["silent"])
        cerr << "Start searching for " << _params["peripheral"].get<string>()
             << endl;
    });

    _adapter.set_callback_on_scan_stop([&]() {
      if (!_params["silent"])
        cerr << "Found peripheral: " << _peripheral.identifier()
             << " address: " << _peripheral.address()
             << " rssi: " << _peripheral.rssi() << endl;
    });

    _adapter.set_callback_on_scan_found([&](SimpleBLE::Peripheral peripheral) {
      if (_params["list_peripherals"])
        cerr << peripheral.address() << ": "
             << " name: " << setw(15) << peripheral.identifier()
             << ", rssi: " << peripheral.rssi() << endl;
      if (peripheral.identifier() == _params["peripheral"].get<string>()) {
        found = true;
        _peripheral = peripheral;
      }
    });

    _adapter.scan_start();
    while (!found) {
      this_thread::sleep_for(chrono::milliseconds(100));
    }
    _adapter.scan_stop();
    _peripheral.connect();

    for (auto &service : _peripheral.services()) {
      for (auto &characteristic : service.characteristics()) {
        if (_params["characteristics"].empty() || _params["characteristics"].contains(characteristic.uuid())) {
          _uuids.push_back(make_pair(service.uuid(), characteristic.uuid()));
        }
      }
    }
  }

  map<string, string> info() override {
    return {{"peripheral", {_params["peripheral"].get<string>()}}};
  };

private:
  // Define the fields that are used to store internal resources
  Adapter _adapter;
  Peripheral _peripheral;
  vector<pair<BluetoothUUID, BluetoothUUID>> _uuids;
};

/*
  ____  _             _             _      _
 |  _ \| |_   _  __ _(_)_ __     __| |_ __(_)_   _____ _ __
 | |_) | | | | |/ _` | | '_ \   / _` | '__| \ \ / / _ \ '__|
 |  __/| | |_| | (_| | | | | | | (_| | |  | |\ V /  __/ |
 |_|   |_|\__,_|\__, |_|_| |_|  \__,_|_|  |_| \_/ \___|_|
                |___/
Enable the class as plugin
*/
INSTALL_SOURCE_DRIVER(Ble_pluginPlugin, json)

/*
                  _
  _ __ ___   __ _(_)_ __
 | '_ ` _ \ / _` | | '_ \
 | | | | | | (_| | | | | |
 |_| |_| |_|\__,_|_|_| |_|

For testing purposes, when directly executing the plugin
*/

static bool running = true;

int main(int argc, char const *argv[]) {
  Ble_pluginPlugin plugin;
  json output, params;

  // Set example values to params
  params["peripheral"] = "Arduino";
  params["list_peripherals"] = false;
  // params["characteristics"] = {{"00002a58-0000-1000-8000-00805f9b34fb", true}};

  // Set the parameters
  plugin.set_params(&params);

  signal(SIGINT, [](int) { running = false; });
  while (running) {
    // Process data
    plugin.get_output(output);

    // Produce output
    cout << "Output: " << output << endl;

    this_thread::sleep_for(chrono::milliseconds(250));
  }

  return 0;
}
